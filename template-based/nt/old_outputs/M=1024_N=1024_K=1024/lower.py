# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer[(1024, 1024), "float32"], B: T.Buffer[(1024, 1024), "float32"], Y: T.Buffer[(1024, 1024), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # var definition
        threadIdx_x = T.env_thread("threadIdx.x")
        blockIdx_x = T.env_thread("blockIdx.x")
        # buffer definition
        A_1 = T.buffer_decl([1048576], dtype="float32", data=A.data)
        B_1 = T.buffer_decl([1048576], dtype="float32", data=B.data)
        Y_1 = T.buffer_decl([1048576], dtype="float32", data=Y.data)
        # body
        T.launch_thread(blockIdx_x, 128)
        Y_local = T.allocate([64], "float32", "local")
        Y_local_1 = T.buffer_decl([1024], dtype="float32", data=Y_local, scope="local")
        A_shared = T.allocate([4096], "float32", "shared")
        A_shared_1 = T.buffer_decl([4096], dtype="float32", data=A_shared, scope="shared")
        B_shared = T.allocate([2048], "float32", "shared")
        B_shared_1 = T.buffer_decl([2048], dtype="float32", data=B_shared, scope="shared")
        T.launch_thread(threadIdx_x, 128)
        Y_local_1[0] = T.float32(0)
        Y_local_1[32] = T.float32(0)
        Y_local_1[1] = T.float32(0)
        Y_local_1[33] = T.float32(0)
        Y_local_1[2] = T.float32(0)
        Y_local_1[34] = T.float32(0)
        Y_local_1[3] = T.float32(0)
        Y_local_1[35] = T.float32(0)
        Y_local_1[4] = T.float32(0)
        Y_local_1[36] = T.float32(0)
        Y_local_1[5] = T.float32(0)
        Y_local_1[37] = T.float32(0)
        Y_local_1[6] = T.float32(0)
        Y_local_1[38] = T.float32(0)
        Y_local_1[7] = T.float32(0)
        Y_local_1[39] = T.float32(0)
        Y_local_1[8] = T.float32(0)
        Y_local_1[40] = T.float32(0)
        Y_local_1[9] = T.float32(0)
        Y_local_1[41] = T.float32(0)
        Y_local_1[10] = T.float32(0)
        Y_local_1[42] = T.float32(0)
        Y_local_1[11] = T.float32(0)
        Y_local_1[43] = T.float32(0)
        Y_local_1[12] = T.float32(0)
        Y_local_1[44] = T.float32(0)
        Y_local_1[13] = T.float32(0)
        Y_local_1[45] = T.float32(0)
        Y_local_1[14] = T.float32(0)
        Y_local_1[46] = T.float32(0)
        Y_local_1[15] = T.float32(0)
        Y_local_1[47] = T.float32(0)
        Y_local_1[16] = T.float32(0)
        Y_local_1[48] = T.float32(0)
        Y_local_1[17] = T.float32(0)
        Y_local_1[49] = T.float32(0)
        Y_local_1[18] = T.float32(0)
        Y_local_1[50] = T.float32(0)
        Y_local_1[19] = T.float32(0)
        Y_local_1[51] = T.float32(0)
        Y_local_1[20] = T.float32(0)
        Y_local_1[52] = T.float32(0)
        Y_local_1[21] = T.float32(0)
        Y_local_1[53] = T.float32(0)
        Y_local_1[22] = T.float32(0)
        Y_local_1[54] = T.float32(0)
        Y_local_1[23] = T.float32(0)
        Y_local_1[55] = T.float32(0)
        Y_local_1[24] = T.float32(0)
        Y_local_1[56] = T.float32(0)
        Y_local_1[25] = T.float32(0)
        Y_local_1[57] = T.float32(0)
        Y_local_1[26] = T.float32(0)
        Y_local_1[58] = T.float32(0)
        Y_local_1[27] = T.float32(0)
        Y_local_1[59] = T.float32(0)
        Y_local_1[28] = T.float32(0)
        Y_local_1[60] = T.float32(0)
        Y_local_1[29] = T.float32(0)
        Y_local_1[61] = T.float32(0)
        Y_local_1[30] = T.float32(0)
        Y_local_1[62] = T.float32(0)
        Y_local_1[31] = T.float32(0)
        Y_local_1[63] = T.float32(0)
        for k_0 in T.serial(32):
            cse_var_1: T.int32 = k_0 * 32768
            A_shared_1[threadIdx_x * 2:threadIdx_x * 2 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 2]
            A_shared_1[threadIdx_x * 2 + 256:threadIdx_x * 2 + 256 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 2048:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 2048 + 2]
            A_shared_1[threadIdx_x * 2 + 512:threadIdx_x * 2 + 512 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 4096:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 4096 + 2]
            A_shared_1[threadIdx_x * 2 + 768:threadIdx_x * 2 + 768 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 6144:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 6144 + 2]
            A_shared_1[threadIdx_x * 2 + 1024:threadIdx_x * 2 + 1024 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 8192:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 8192 + 2]
            A_shared_1[threadIdx_x * 2 + 1280:threadIdx_x * 2 + 1280 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 10240:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 10240 + 2]
            A_shared_1[threadIdx_x * 2 + 1536:threadIdx_x * 2 + 1536 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 12288:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 12288 + 2]
            A_shared_1[threadIdx_x * 2 + 1792:threadIdx_x * 2 + 1792 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 14336:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 14336 + 2]
            A_shared_1[threadIdx_x * 2 + 2048:threadIdx_x * 2 + 2048 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 16384:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 16384 + 2]
            A_shared_1[threadIdx_x * 2 + 2304:threadIdx_x * 2 + 2304 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 18432:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 18432 + 2]
            A_shared_1[threadIdx_x * 2 + 2560:threadIdx_x * 2 + 2560 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 20480:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 20480 + 2]
            A_shared_1[threadIdx_x * 2 + 2816:threadIdx_x * 2 + 2816 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 22528:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 22528 + 2]
            A_shared_1[threadIdx_x * 2 + 3072:threadIdx_x * 2 + 3072 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 24576:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 24576 + 2]
            A_shared_1[threadIdx_x * 2 + 3328:threadIdx_x * 2 + 3328 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 26624:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 26624 + 2]
            A_shared_1[threadIdx_x * 2 + 3584:threadIdx_x * 2 + 3584 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 28672:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 28672 + 2]
            A_shared_1[threadIdx_x * 2 + 3840:threadIdx_x * 2 + 3840 + 2] = A_1[cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 30720:cse_var_1 + threadIdx_x // 64 * 1024 + blockIdx_x // 16 * 128 + threadIdx_x % 64 * 2 + 30720 + 2]
            B_shared_1[threadIdx_x * 2:threadIdx_x * 2 + 2] = B_1[cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2:cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2 + 2]
            B_shared_1[threadIdx_x * 2 + 256:threadIdx_x * 2 + 256 + 2] = B_1[cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2 + 4096:cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2 + 4096 + 2]
            B_shared_1[threadIdx_x * 2 + 512:threadIdx_x * 2 + 512 + 2] = B_1[cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2 + 8192:cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2 + 8192 + 2]
            B_shared_1[threadIdx_x * 2 + 768:threadIdx_x * 2 + 768 + 2] = B_1[cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2 + 12288:cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2 + 12288 + 2]
            B_shared_1[threadIdx_x * 2 + 1024:threadIdx_x * 2 + 1024 + 2] = B_1[cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2 + 16384:cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2 + 16384 + 2]
            B_shared_1[threadIdx_x * 2 + 1280:threadIdx_x * 2 + 1280 + 2] = B_1[cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2 + 20480:cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2 + 20480 + 2]
            B_shared_1[threadIdx_x * 2 + 1536:threadIdx_x * 2 + 1536 + 2] = B_1[cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2 + 24576:cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2 + 24576 + 2]
            B_shared_1[threadIdx_x * 2 + 1792:threadIdx_x * 2 + 1792 + 2] = B_1[cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2 + 28672:cse_var_1 + threadIdx_x // 32 * 1024 + blockIdx_x % 16 * 64 + threadIdx_x % 32 * 2 + 28672 + 2]
            for k_1, k_2 in T.grid(2, 16):
                Y_local_1[0] = Y_local_1[0] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[32] = Y_local_1[32] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[1] = Y_local_1[1] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[33] = Y_local_1[33] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
                Y_local_1[2] = Y_local_1[2] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 1] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[34] = Y_local_1[34] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 1] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[3] = Y_local_1[3] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 1] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[35] = Y_local_1[35] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 1] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
                Y_local_1[4] = Y_local_1[4] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 2] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[36] = Y_local_1[36] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 2] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[5] = Y_local_1[5] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 2] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[37] = Y_local_1[37] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 2] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
                Y_local_1[6] = Y_local_1[6] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 3] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[38] = Y_local_1[38] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 3] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[7] = Y_local_1[7] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 3] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[39] = Y_local_1[39] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 3] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
                Y_local_1[8] = Y_local_1[8] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 4] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[40] = Y_local_1[40] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 4] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[9] = Y_local_1[9] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 4] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[41] = Y_local_1[41] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 4] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
                Y_local_1[10] = Y_local_1[10] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 5] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[42] = Y_local_1[42] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 5] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[11] = Y_local_1[11] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 5] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[43] = Y_local_1[43] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 5] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
                Y_local_1[12] = Y_local_1[12] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 6] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[44] = Y_local_1[44] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 6] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[13] = Y_local_1[13] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 6] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[45] = Y_local_1[45] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 6] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
                Y_local_1[14] = Y_local_1[14] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 7] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[46] = Y_local_1[46] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 7] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[15] = Y_local_1[15] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 7] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[47] = Y_local_1[47] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 7] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
                Y_local_1[16] = Y_local_1[16] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 8] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[48] = Y_local_1[48] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 8] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[17] = Y_local_1[17] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 8] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[49] = Y_local_1[49] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 8] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
                Y_local_1[18] = Y_local_1[18] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 9] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[50] = Y_local_1[50] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 9] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[19] = Y_local_1[19] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 9] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[51] = Y_local_1[51] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 9] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
                Y_local_1[20] = Y_local_1[20] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 10] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[52] = Y_local_1[52] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 10] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[21] = Y_local_1[21] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 10] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[53] = Y_local_1[53] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 10] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
                Y_local_1[22] = Y_local_1[22] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 11] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[54] = Y_local_1[54] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 11] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[23] = Y_local_1[23] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 11] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[55] = Y_local_1[55] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 11] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
                Y_local_1[24] = Y_local_1[24] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 12] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[56] = Y_local_1[56] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 12] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[25] = Y_local_1[25] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 12] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[57] = Y_local_1[57] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 12] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
                Y_local_1[26] = Y_local_1[26] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 13] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[58] = Y_local_1[58] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 13] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[27] = Y_local_1[27] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 13] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[59] = Y_local_1[59] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 13] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
                Y_local_1[28] = Y_local_1[28] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 14] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[60] = Y_local_1[60] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 14] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[29] = Y_local_1[29] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 14] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[61] = Y_local_1[61] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 14] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
                Y_local_1[30] = Y_local_1[30] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 15] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2]
                Y_local_1[62] = Y_local_1[62] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 15] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 32]
                Y_local_1[31] = Y_local_1[31] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 15] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 1]
                Y_local_1[63] = Y_local_1[63] + A_shared_1[k_1 * 2048 + k_2 * 128 + threadIdx_x // 16 * 16 + 15] * B_shared_1[k_1 * 1024 + k_2 * 64 + threadIdx_x % 16 * 2 + 33]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2] = Y_local_1[0]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 32] = Y_local_1[32]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 1] = Y_local_1[1]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 33] = Y_local_1[33]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 1024] = Y_local_1[2]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 1056] = Y_local_1[34]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 1025] = Y_local_1[3]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 1057] = Y_local_1[35]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 2048] = Y_local_1[4]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 2080] = Y_local_1[36]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 2049] = Y_local_1[5]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 2081] = Y_local_1[37]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 3072] = Y_local_1[6]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 3104] = Y_local_1[38]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 3073] = Y_local_1[7]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 3105] = Y_local_1[39]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 4096] = Y_local_1[8]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 4128] = Y_local_1[40]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 4097] = Y_local_1[9]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 4129] = Y_local_1[41]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 5120] = Y_local_1[10]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 5152] = Y_local_1[42]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 5121] = Y_local_1[11]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 5153] = Y_local_1[43]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 6144] = Y_local_1[12]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 6176] = Y_local_1[44]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 6145] = Y_local_1[13]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 6177] = Y_local_1[45]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 7168] = Y_local_1[14]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 7200] = Y_local_1[46]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 7169] = Y_local_1[15]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 7201] = Y_local_1[47]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 8192] = Y_local_1[16]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 8224] = Y_local_1[48]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 8193] = Y_local_1[17]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 8225] = Y_local_1[49]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 9216] = Y_local_1[18]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 9248] = Y_local_1[50]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 9217] = Y_local_1[19]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 9249] = Y_local_1[51]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 10240] = Y_local_1[20]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 10272] = Y_local_1[52]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 10241] = Y_local_1[21]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 10273] = Y_local_1[53]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 11264] = Y_local_1[22]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 11296] = Y_local_1[54]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 11265] = Y_local_1[23]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 11297] = Y_local_1[55]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 12288] = Y_local_1[24]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 12320] = Y_local_1[56]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 12289] = Y_local_1[25]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 12321] = Y_local_1[57]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 13312] = Y_local_1[26]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 13344] = Y_local_1[58]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 13313] = Y_local_1[27]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 13345] = Y_local_1[59]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 14336] = Y_local_1[28]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 14368] = Y_local_1[60]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 14337] = Y_local_1[29]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 14369] = Y_local_1[61]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 15360] = Y_local_1[30]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 15392] = Y_local_1[62]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 15361] = Y_local_1[31]
        Y_1[blockIdx_x // 16 * 131072 + threadIdx_x // 16 * 16384 + blockIdx_x % 16 * 64 + threadIdx_x % 16 * 2 + 15393] = Y_local_1[63]
    

