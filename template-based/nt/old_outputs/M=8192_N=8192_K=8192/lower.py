# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer[(8192, 8192), "float32"], B: T.Buffer[(8192, 8192), "float32"], Y: T.Buffer[(8192, 8192), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # var definition
        threadIdx_x = T.env_thread("threadIdx.x")
        blockIdx_x = T.env_thread("blockIdx.x")
        # buffer definition
        A_1 = T.buffer_decl([67108864], dtype="float32", data=A.data)
        B_1 = T.buffer_decl([67108864], dtype="float32", data=B.data)
        Y_1 = T.buffer_decl([67108864], dtype="float32", data=Y.data)
        # body
        T.launch_thread(blockIdx_x, 4096)
        Y_local = T.allocate([64], "float32", "local")
        Y_local_1 = T.buffer_decl([256], dtype="float32", data=Y_local, scope="local")
        A_shared = T.allocate([8192], "float32", "shared")
        A_shared_1 = T.buffer_decl([8192], dtype="float32", data=A_shared, scope="shared")
        B_shared = T.allocate([2048], "float32", "shared")
        B_shared_1 = T.buffer_decl([2048], dtype="float32", data=B_shared, scope="shared")
        T.launch_thread(threadIdx_x, 256)
        Y_local_1[0] = T.float32(0)
        Y_local_1[16] = T.float32(0)
        Y_local_1[32] = T.float32(0)
        Y_local_1[48] = T.float32(0)
        Y_local_1[1] = T.float32(0)
        Y_local_1[17] = T.float32(0)
        Y_local_1[33] = T.float32(0)
        Y_local_1[49] = T.float32(0)
        Y_local_1[2] = T.float32(0)
        Y_local_1[18] = T.float32(0)
        Y_local_1[34] = T.float32(0)
        Y_local_1[50] = T.float32(0)
        Y_local_1[3] = T.float32(0)
        Y_local_1[19] = T.float32(0)
        Y_local_1[35] = T.float32(0)
        Y_local_1[51] = T.float32(0)
        Y_local_1[8] = T.float32(0)
        Y_local_1[24] = T.float32(0)
        Y_local_1[40] = T.float32(0)
        Y_local_1[56] = T.float32(0)
        Y_local_1[9] = T.float32(0)
        Y_local_1[25] = T.float32(0)
        Y_local_1[41] = T.float32(0)
        Y_local_1[57] = T.float32(0)
        Y_local_1[10] = T.float32(0)
        Y_local_1[26] = T.float32(0)
        Y_local_1[42] = T.float32(0)
        Y_local_1[58] = T.float32(0)
        Y_local_1[11] = T.float32(0)
        Y_local_1[27] = T.float32(0)
        Y_local_1[43] = T.float32(0)
        Y_local_1[59] = T.float32(0)
        Y_local_1[4] = T.float32(0)
        Y_local_1[20] = T.float32(0)
        Y_local_1[36] = T.float32(0)
        Y_local_1[52] = T.float32(0)
        Y_local_1[5] = T.float32(0)
        Y_local_1[21] = T.float32(0)
        Y_local_1[37] = T.float32(0)
        Y_local_1[53] = T.float32(0)
        Y_local_1[6] = T.float32(0)
        Y_local_1[22] = T.float32(0)
        Y_local_1[38] = T.float32(0)
        Y_local_1[54] = T.float32(0)
        Y_local_1[7] = T.float32(0)
        Y_local_1[23] = T.float32(0)
        Y_local_1[39] = T.float32(0)
        Y_local_1[55] = T.float32(0)
        Y_local_1[12] = T.float32(0)
        Y_local_1[28] = T.float32(0)
        Y_local_1[44] = T.float32(0)
        Y_local_1[60] = T.float32(0)
        Y_local_1[13] = T.float32(0)
        Y_local_1[29] = T.float32(0)
        Y_local_1[45] = T.float32(0)
        Y_local_1[61] = T.float32(0)
        Y_local_1[14] = T.float32(0)
        Y_local_1[30] = T.float32(0)
        Y_local_1[46] = T.float32(0)
        Y_local_1[62] = T.float32(0)
        Y_local_1[15] = T.float32(0)
        Y_local_1[31] = T.float32(0)
        Y_local_1[47] = T.float32(0)
        Y_local_1[63] = T.float32(0)
        for k_0 in T.serial(256):
            cse_var_1: T.int32 = k_0 * 262144
            A_shared_1[threadIdx_x * 2:threadIdx_x * 2 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 2]
            A_shared_1[threadIdx_x * 2 + 512:threadIdx_x * 2 + 512 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 16384:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 16384 + 2]
            A_shared_1[threadIdx_x * 2 + 1024:threadIdx_x * 2 + 1024 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 32768:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 32768 + 2]
            A_shared_1[threadIdx_x * 2 + 1536:threadIdx_x * 2 + 1536 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 49152:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 49152 + 2]
            A_shared_1[threadIdx_x * 2 + 2048:threadIdx_x * 2 + 2048 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 65536:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 65536 + 2]
            A_shared_1[threadIdx_x * 2 + 2560:threadIdx_x * 2 + 2560 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 81920:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 81920 + 2]
            A_shared_1[threadIdx_x * 2 + 3072:threadIdx_x * 2 + 3072 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 98304:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 98304 + 2]
            A_shared_1[threadIdx_x * 2 + 3584:threadIdx_x * 2 + 3584 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 114688:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 114688 + 2]
            A_shared_1[threadIdx_x * 2 + 4096:threadIdx_x * 2 + 4096 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 131072:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 131072 + 2]
            A_shared_1[threadIdx_x * 2 + 4608:threadIdx_x * 2 + 4608 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 147456:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 147456 + 2]
            A_shared_1[threadIdx_x * 2 + 5120:threadIdx_x * 2 + 5120 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 163840:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 163840 + 2]
            A_shared_1[threadIdx_x * 2 + 5632:threadIdx_x * 2 + 5632 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 180224:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 180224 + 2]
            A_shared_1[threadIdx_x * 2 + 6144:threadIdx_x * 2 + 6144 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 196608:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 196608 + 2]
            A_shared_1[threadIdx_x * 2 + 6656:threadIdx_x * 2 + 6656 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 212992:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 212992 + 2]
            A_shared_1[threadIdx_x * 2 + 7168:threadIdx_x * 2 + 7168 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 229376:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 229376 + 2]
            A_shared_1[threadIdx_x * 2 + 7680:threadIdx_x * 2 + 7680 + 2] = A_1[cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 245760:cse_var_1 + threadIdx_x // 128 * 8192 + blockIdx_x // 128 * 256 + threadIdx_x % 128 * 2 + 245760 + 2]
            B_shared_1[threadIdx_x * 4:threadIdx_x * 4 + 4] = B_1[cse_var_1 + threadIdx_x // 16 * 8192 + blockIdx_x % 128 * 64 + threadIdx_x % 16 * 4:cse_var_1 + threadIdx_x // 16 * 8192 + blockIdx_x % 128 * 64 + threadIdx_x % 16 * 4 + 4]
            B_shared_1[threadIdx_x * 4 + 1024:threadIdx_x * 4 + 1024 + 4] = B_1[cse_var_1 + threadIdx_x // 16 * 8192 + blockIdx_x % 128 * 64 + threadIdx_x % 16 * 4 + 131072:cse_var_1 + threadIdx_x // 16 * 8192 + blockIdx_x % 128 * 64 + threadIdx_x % 16 * 4 + 131072 + 4]
            for k_1 in T.serial(8):
                Y_local_1[0] = Y_local_1[0] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8]
                Y_local_1[16] = Y_local_1[16] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 16]
                Y_local_1[32] = Y_local_1[32] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 32]
                Y_local_1[48] = Y_local_1[48] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 48]
                Y_local_1[1] = Y_local_1[1] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 1]
                Y_local_1[17] = Y_local_1[17] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 17]
                Y_local_1[33] = Y_local_1[33] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 33]
                Y_local_1[49] = Y_local_1[49] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 49]
                Y_local_1[2] = Y_local_1[2] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 2]
                Y_local_1[18] = Y_local_1[18] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 18]
                Y_local_1[34] = Y_local_1[34] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 34]
                Y_local_1[50] = Y_local_1[50] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 50]
                Y_local_1[3] = Y_local_1[3] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 3]
                Y_local_1[19] = Y_local_1[19] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 19]
                Y_local_1[35] = Y_local_1[35] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 35]
                Y_local_1[51] = Y_local_1[51] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 51]
                Y_local_1[8] = Y_local_1[8] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8]
                Y_local_1[24] = Y_local_1[24] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 16]
                Y_local_1[40] = Y_local_1[40] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 32]
                Y_local_1[56] = Y_local_1[56] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 48]
                Y_local_1[9] = Y_local_1[9] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 1]
                Y_local_1[25] = Y_local_1[25] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 17]
                Y_local_1[41] = Y_local_1[41] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 33]
                Y_local_1[57] = Y_local_1[57] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 49]
                Y_local_1[10] = Y_local_1[10] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 2]
                Y_local_1[26] = Y_local_1[26] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 18]
                Y_local_1[42] = Y_local_1[42] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 34]
                Y_local_1[58] = Y_local_1[58] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 50]
                Y_local_1[11] = Y_local_1[11] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 3]
                Y_local_1[27] = Y_local_1[27] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 19]
                Y_local_1[43] = Y_local_1[43] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 35]
                Y_local_1[59] = Y_local_1[59] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 51]
                Y_local_1[0] = Y_local_1[0] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 64]
                Y_local_1[16] = Y_local_1[16] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 80]
                Y_local_1[32] = Y_local_1[32] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 96]
                Y_local_1[48] = Y_local_1[48] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 112]
                Y_local_1[1] = Y_local_1[1] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 65]
                Y_local_1[17] = Y_local_1[17] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 81]
                Y_local_1[33] = Y_local_1[33] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 97]
                Y_local_1[49] = Y_local_1[49] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 113]
                Y_local_1[2] = Y_local_1[2] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 66]
                Y_local_1[18] = Y_local_1[18] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 82]
                Y_local_1[34] = Y_local_1[34] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 98]
                Y_local_1[50] = Y_local_1[50] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 114]
                Y_local_1[3] = Y_local_1[3] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 67]
                Y_local_1[19] = Y_local_1[19] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 83]
                Y_local_1[35] = Y_local_1[35] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 99]
                Y_local_1[51] = Y_local_1[51] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 115]
                Y_local_1[8] = Y_local_1[8] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 64]
                Y_local_1[24] = Y_local_1[24] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 80]
                Y_local_1[40] = Y_local_1[40] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 96]
                Y_local_1[56] = Y_local_1[56] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 112]
                Y_local_1[9] = Y_local_1[9] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 65]
                Y_local_1[25] = Y_local_1[25] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 81]
                Y_local_1[41] = Y_local_1[41] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 97]
                Y_local_1[57] = Y_local_1[57] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 113]
                Y_local_1[10] = Y_local_1[10] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 66]
                Y_local_1[26] = Y_local_1[26] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 82]
                Y_local_1[42] = Y_local_1[42] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 98]
                Y_local_1[58] = Y_local_1[58] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 114]
                Y_local_1[11] = Y_local_1[11] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 67]
                Y_local_1[27] = Y_local_1[27] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 83]
                Y_local_1[43] = Y_local_1[43] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 99]
                Y_local_1[59] = Y_local_1[59] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 115]
                Y_local_1[0] = Y_local_1[0] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 128]
                Y_local_1[16] = Y_local_1[16] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 144]
                Y_local_1[32] = Y_local_1[32] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 160]
                Y_local_1[48] = Y_local_1[48] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 176]
                Y_local_1[1] = Y_local_1[1] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 129]
                Y_local_1[17] = Y_local_1[17] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 145]
                Y_local_1[33] = Y_local_1[33] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 161]
                Y_local_1[49] = Y_local_1[49] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 177]
                Y_local_1[2] = Y_local_1[2] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 130]
                Y_local_1[18] = Y_local_1[18] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 146]
                Y_local_1[34] = Y_local_1[34] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 162]
                Y_local_1[50] = Y_local_1[50] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 178]
                Y_local_1[3] = Y_local_1[3] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 131]
                Y_local_1[19] = Y_local_1[19] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 147]
                Y_local_1[35] = Y_local_1[35] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 163]
                Y_local_1[51] = Y_local_1[51] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 179]
                Y_local_1[8] = Y_local_1[8] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 128]
                Y_local_1[24] = Y_local_1[24] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 144]
                Y_local_1[40] = Y_local_1[40] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 160]
                Y_local_1[56] = Y_local_1[56] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 176]
                Y_local_1[9] = Y_local_1[9] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 129]
                Y_local_1[25] = Y_local_1[25] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 145]
                Y_local_1[41] = Y_local_1[41] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 161]
                Y_local_1[57] = Y_local_1[57] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 177]
                Y_local_1[10] = Y_local_1[10] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 130]
                Y_local_1[26] = Y_local_1[26] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 146]
                Y_local_1[42] = Y_local_1[42] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 162]
                Y_local_1[58] = Y_local_1[58] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 178]
                Y_local_1[11] = Y_local_1[11] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 131]
                Y_local_1[27] = Y_local_1[27] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 147]
                Y_local_1[43] = Y_local_1[43] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 163]
                Y_local_1[59] = Y_local_1[59] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 179]
                Y_local_1[0] = Y_local_1[0] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 192]
                Y_local_1[16] = Y_local_1[16] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 208]
                Y_local_1[32] = Y_local_1[32] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 224]
                Y_local_1[48] = Y_local_1[48] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 240]
                Y_local_1[1] = Y_local_1[1] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 193]
                Y_local_1[17] = Y_local_1[17] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 209]
                Y_local_1[33] = Y_local_1[33] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 225]
                Y_local_1[49] = Y_local_1[49] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 241]
                Y_local_1[2] = Y_local_1[2] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 194]
                Y_local_1[18] = Y_local_1[18] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 210]
                Y_local_1[34] = Y_local_1[34] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 226]
                Y_local_1[50] = Y_local_1[50] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 242]
                Y_local_1[3] = Y_local_1[3] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 195]
                Y_local_1[19] = Y_local_1[19] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 211]
                Y_local_1[35] = Y_local_1[35] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 227]
                Y_local_1[51] = Y_local_1[51] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 243]
                Y_local_1[8] = Y_local_1[8] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 192]
                Y_local_1[24] = Y_local_1[24] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 208]
                Y_local_1[40] = Y_local_1[40] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 224]
                Y_local_1[56] = Y_local_1[56] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 240]
                Y_local_1[9] = Y_local_1[9] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 193]
                Y_local_1[25] = Y_local_1[25] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 209]
                Y_local_1[41] = Y_local_1[41] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 225]
                Y_local_1[57] = Y_local_1[57] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 241]
                Y_local_1[10] = Y_local_1[10] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 194]
                Y_local_1[26] = Y_local_1[26] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 210]
                Y_local_1[42] = Y_local_1[42] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 226]
                Y_local_1[58] = Y_local_1[58] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 242]
                Y_local_1[11] = Y_local_1[11] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 195]
                Y_local_1[27] = Y_local_1[27] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 211]
                Y_local_1[43] = Y_local_1[43] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 227]
                Y_local_1[59] = Y_local_1[59] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 243]
                Y_local_1[4] = Y_local_1[4] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 4]
                Y_local_1[20] = Y_local_1[20] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 20]
                Y_local_1[36] = Y_local_1[36] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 36]
                Y_local_1[52] = Y_local_1[52] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 52]
                Y_local_1[5] = Y_local_1[5] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 5]
                Y_local_1[21] = Y_local_1[21] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 21]
                Y_local_1[37] = Y_local_1[37] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 37]
                Y_local_1[53] = Y_local_1[53] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 53]
                Y_local_1[6] = Y_local_1[6] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 6]
                Y_local_1[22] = Y_local_1[22] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 22]
                Y_local_1[38] = Y_local_1[38] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 38]
                Y_local_1[54] = Y_local_1[54] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 54]
                Y_local_1[7] = Y_local_1[7] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 7]
                Y_local_1[23] = Y_local_1[23] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 23]
                Y_local_1[39] = Y_local_1[39] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 39]
                Y_local_1[55] = Y_local_1[55] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 55]
                Y_local_1[12] = Y_local_1[12] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 4]
                Y_local_1[28] = Y_local_1[28] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 20]
                Y_local_1[44] = Y_local_1[44] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 36]
                Y_local_1[60] = Y_local_1[60] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 52]
                Y_local_1[13] = Y_local_1[13] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 5]
                Y_local_1[29] = Y_local_1[29] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 21]
                Y_local_1[45] = Y_local_1[45] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 37]
                Y_local_1[61] = Y_local_1[61] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 53]
                Y_local_1[14] = Y_local_1[14] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 6]
                Y_local_1[30] = Y_local_1[30] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 22]
                Y_local_1[46] = Y_local_1[46] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 38]
                Y_local_1[62] = Y_local_1[62] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 54]
                Y_local_1[15] = Y_local_1[15] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 7]
                Y_local_1[31] = Y_local_1[31] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 23]
                Y_local_1[47] = Y_local_1[47] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 39]
                Y_local_1[63] = Y_local_1[63] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 1] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 55]
                Y_local_1[4] = Y_local_1[4] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 68]
                Y_local_1[20] = Y_local_1[20] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 84]
                Y_local_1[36] = Y_local_1[36] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 100]
                Y_local_1[52] = Y_local_1[52] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 116]
                Y_local_1[5] = Y_local_1[5] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 69]
                Y_local_1[21] = Y_local_1[21] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 85]
                Y_local_1[37] = Y_local_1[37] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 101]
                Y_local_1[53] = Y_local_1[53] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 117]
                Y_local_1[6] = Y_local_1[6] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 70]
                Y_local_1[22] = Y_local_1[22] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 86]
                Y_local_1[38] = Y_local_1[38] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 102]
                Y_local_1[54] = Y_local_1[54] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 118]
                Y_local_1[7] = Y_local_1[7] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 71]
                Y_local_1[23] = Y_local_1[23] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 87]
                Y_local_1[39] = Y_local_1[39] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 103]
                Y_local_1[55] = Y_local_1[55] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 256] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 119]
                Y_local_1[12] = Y_local_1[12] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 68]
                Y_local_1[28] = Y_local_1[28] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 84]
                Y_local_1[44] = Y_local_1[44] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 100]
                Y_local_1[60] = Y_local_1[60] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 116]
                Y_local_1[13] = Y_local_1[13] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 69]
                Y_local_1[29] = Y_local_1[29] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 85]
                Y_local_1[45] = Y_local_1[45] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 101]
                Y_local_1[61] = Y_local_1[61] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 117]
                Y_local_1[14] = Y_local_1[14] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 70]
                Y_local_1[30] = Y_local_1[30] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 86]
                Y_local_1[46] = Y_local_1[46] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 102]
                Y_local_1[62] = Y_local_1[62] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 118]
                Y_local_1[15] = Y_local_1[15] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 71]
                Y_local_1[31] = Y_local_1[31] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 87]
                Y_local_1[47] = Y_local_1[47] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 103]
                Y_local_1[63] = Y_local_1[63] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 257] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 119]
                Y_local_1[4] = Y_local_1[4] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 132]
                Y_local_1[20] = Y_local_1[20] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 148]
                Y_local_1[36] = Y_local_1[36] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 164]
                Y_local_1[52] = Y_local_1[52] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 180]
                Y_local_1[5] = Y_local_1[5] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 133]
                Y_local_1[21] = Y_local_1[21] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 149]
                Y_local_1[37] = Y_local_1[37] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 165]
                Y_local_1[53] = Y_local_1[53] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 181]
                Y_local_1[6] = Y_local_1[6] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 134]
                Y_local_1[22] = Y_local_1[22] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 150]
                Y_local_1[38] = Y_local_1[38] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 166]
                Y_local_1[54] = Y_local_1[54] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 182]
                Y_local_1[7] = Y_local_1[7] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 135]
                Y_local_1[23] = Y_local_1[23] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 151]
                Y_local_1[39] = Y_local_1[39] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 167]
                Y_local_1[55] = Y_local_1[55] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 512] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 183]
                Y_local_1[12] = Y_local_1[12] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 132]
                Y_local_1[28] = Y_local_1[28] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 148]
                Y_local_1[44] = Y_local_1[44] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 164]
                Y_local_1[60] = Y_local_1[60] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 180]
                Y_local_1[13] = Y_local_1[13] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 133]
                Y_local_1[29] = Y_local_1[29] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 149]
                Y_local_1[45] = Y_local_1[45] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 165]
                Y_local_1[61] = Y_local_1[61] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 181]
                Y_local_1[14] = Y_local_1[14] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 134]
                Y_local_1[30] = Y_local_1[30] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 150]
                Y_local_1[46] = Y_local_1[46] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 166]
                Y_local_1[62] = Y_local_1[62] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 182]
                Y_local_1[15] = Y_local_1[15] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 135]
                Y_local_1[31] = Y_local_1[31] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 151]
                Y_local_1[47] = Y_local_1[47] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 167]
                Y_local_1[63] = Y_local_1[63] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 513] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 183]
                Y_local_1[4] = Y_local_1[4] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 196]
                Y_local_1[20] = Y_local_1[20] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 212]
                Y_local_1[36] = Y_local_1[36] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 228]
                Y_local_1[52] = Y_local_1[52] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 244]
                Y_local_1[5] = Y_local_1[5] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 197]
                Y_local_1[21] = Y_local_1[21] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 213]
                Y_local_1[37] = Y_local_1[37] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 229]
                Y_local_1[53] = Y_local_1[53] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 245]
                Y_local_1[6] = Y_local_1[6] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 198]
                Y_local_1[22] = Y_local_1[22] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 214]
                Y_local_1[38] = Y_local_1[38] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 230]
                Y_local_1[54] = Y_local_1[54] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 246]
                Y_local_1[7] = Y_local_1[7] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 199]
                Y_local_1[23] = Y_local_1[23] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 215]
                Y_local_1[39] = Y_local_1[39] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 231]
                Y_local_1[55] = Y_local_1[55] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 768] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 247]
                Y_local_1[12] = Y_local_1[12] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 196]
                Y_local_1[28] = Y_local_1[28] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 212]
                Y_local_1[44] = Y_local_1[44] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 228]
                Y_local_1[60] = Y_local_1[60] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 244]
                Y_local_1[13] = Y_local_1[13] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 197]
                Y_local_1[29] = Y_local_1[29] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 213]
                Y_local_1[45] = Y_local_1[45] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 229]
                Y_local_1[61] = Y_local_1[61] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 245]
                Y_local_1[14] = Y_local_1[14] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 198]
                Y_local_1[30] = Y_local_1[30] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 214]
                Y_local_1[46] = Y_local_1[46] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 230]
                Y_local_1[62] = Y_local_1[62] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 246]
                Y_local_1[15] = Y_local_1[15] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 199]
                Y_local_1[31] = Y_local_1[31] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 215]
                Y_local_1[47] = Y_local_1[47] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 231]
                Y_local_1[63] = Y_local_1[63] + A_shared_1[k_1 * 1024 + threadIdx_x // 2 * 2 + 769] * B_shared_1[k_1 * 256 + threadIdx_x % 2 * 8 + 247]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8] = Y_local_1[0]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 16] = Y_local_1[16]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 32] = Y_local_1[32]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 48] = Y_local_1[48]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 1] = Y_local_1[1]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 17] = Y_local_1[17]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 33] = Y_local_1[33]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 49] = Y_local_1[49]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 2] = Y_local_1[2]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 18] = Y_local_1[18]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 34] = Y_local_1[34]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 50] = Y_local_1[50]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 3] = Y_local_1[3]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 19] = Y_local_1[19]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 35] = Y_local_1[35]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 51] = Y_local_1[51]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 4] = Y_local_1[4]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 20] = Y_local_1[20]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 36] = Y_local_1[36]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 52] = Y_local_1[52]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 5] = Y_local_1[5]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 21] = Y_local_1[21]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 37] = Y_local_1[37]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 53] = Y_local_1[53]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 6] = Y_local_1[6]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 22] = Y_local_1[22]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 38] = Y_local_1[38]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 54] = Y_local_1[54]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 7] = Y_local_1[7]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 23] = Y_local_1[23]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 39] = Y_local_1[39]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 55] = Y_local_1[55]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8192] = Y_local_1[8]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8208] = Y_local_1[24]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8224] = Y_local_1[40]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8240] = Y_local_1[56]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8193] = Y_local_1[9]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8209] = Y_local_1[25]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8225] = Y_local_1[41]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8241] = Y_local_1[57]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8194] = Y_local_1[10]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8210] = Y_local_1[26]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8226] = Y_local_1[42]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8242] = Y_local_1[58]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8195] = Y_local_1[11]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8211] = Y_local_1[27]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8227] = Y_local_1[43]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8243] = Y_local_1[59]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8196] = Y_local_1[12]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8212] = Y_local_1[28]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8228] = Y_local_1[44]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8244] = Y_local_1[60]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8197] = Y_local_1[13]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8213] = Y_local_1[29]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8229] = Y_local_1[45]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8245] = Y_local_1[61]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8198] = Y_local_1[14]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8214] = Y_local_1[30]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8230] = Y_local_1[46]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8246] = Y_local_1[62]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8199] = Y_local_1[15]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8215] = Y_local_1[31]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8231] = Y_local_1[47]
        Y_1[blockIdx_x // 128 * 2097152 + threadIdx_x // 2 * 16384 + blockIdx_x % 128 * 64 + threadIdx_x % 2 * 8 + 8247] = Y_local_1[63]
    

