import os

# M, N, K = 2048, 2048, 2048 #input(), input(), input()
M, N, K = 3072, 3072, 3072
# M, N, K = 4096, 4096, 4096
# M, N, K = 8192, 8192, 8192
print(f'Problem size: M={M}, N={N}, K={K}')

cutlass_kernels = [
    # (( 32, 128, 8), (32, 64, 8), 5),
    # (( 64,  64, 8), (32, 64, 8), 5),
    (( 64, 128, 8), (32, 64, 8), 5),
    # ((128,  32, 8), (64, 32, 8), 5),
    # ((128,  64, 8), (64, 32, 8), 5),
    ((128, 128, 8), (32, 64, 8), 5),
    ((128, 128, 8), (32, 64, 8), 5),
    ((128, 256, 8), (64, 64, 8), 4),
    ((128, 256, 8), (64, 64, 8), 5),
    ((256, 128, 8), (64, 64, 8), 4),
    ((256, 128, 8), (64, 64, 8), 5),
]

kernels = [
    # ((256, 256, 8), (64, 64, 8), 4),
    # ((256, 256, 8), (64, 64, 8), 5),
    # ((256, 256, 8), (64, 128, 8), 4),
    # ((256, 256, 8), (64, 128, 8), 5),
    # ((128, 256, 8), (64, 64, 8), 4),
    # ((128, 256, 8), (64, 64, 8), 5),
    # ((256, 128, 8), (64, 64, 8), 4),
    # ((256, 128, 8), (64, 64, 8), 5),
    ((128, 256, 4), (64, 64, 8), 4),
    ((256, 128, 4), (64, 64, 8), 4),
]

def exe(s): os.system(s)

for k in kernels:
    print(f'Executing kernel with ThreadblockShape = {k[0]}, WarpShape = {k[1]}, Stage = {k[2]}')
    lk = [M, N, K]
    for i in k:
        if isinstance(i, tuple):
            lk.append(i[0])
            lk.append(i[1])
            lk.append(i[2])
        else:
            lk.append(i)
    slk = [str(i) for i in lk]
    exe('python3 v2InputTrace.py ' + ' '.join(slk))